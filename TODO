example and guide:
    - https://teoriadeisegnali.it/appint/html/altro/bgnet/index.html
    - http://www.kegel.com/c10k.html
socket:
    - socket  setsockopt() necessary to keep alive https://www.ibm.com/docs/en/zos/2.4.0?topic=calls-setsockopt https://www.ibm.com/docs/en/aix/7.2?topic=s-setsockopt-subroutine
    - socket explanation video part 1 and 2 https://www.youtube.com/watch?v=gntyAFoZp-E
epoll():
    - https://idndx.com/the-implementation-of-epoll-1/
    - https://idndx.com/the-implementation-of-epoll-2/
    - https://idndx.com/the-implementation-of-epoll-3/
    - https://idndx.com/the-implementation-of-epoll-4/
    - https://medium.com/@avocadi/what-is-epoll-9bbc74272f7c
    - https://copyconstruct.medium.com/the-method-to-epolls-madness-d9d2d6378642

multiplexing:
    - if we want to use select() :
                                    - https://codereview.stackexchange.com/questions/111310/select-server-implementation
                                    - https://italiancoders.it/the-big-select-come-usare-la-select2-in-c-e-c-pt-1/
                                    - https://italiancoders.it/the-big-select-come-usare-la-select2-in-c-e-c-pt-2/
    - poll() or select():
                            - https://mecha-mind.medium.com/a-non-threaded-chat-server-in-c-53dadab8e8f3
                            - https://www.ibm.com/docs/en/i/7.4?topic=designs-using-poll-instead-select
                            - https://hechao.li/2022/01/04/select-vs-poll-vs-epoll/
                            - https://stackoverflow.com/questions/17355593/why-is-epoll-faster-than-select
                            - https://devarea.com/linux-io-multiplexing-select-vs-poll-vs-epoll/
                            - https://stackoverflow.com/questions/17355593/why-is-epoll-faster-than-select
workflow:
    - parser config file: acquire information from config file or if there isn't take the default and initialize struct and class
    - "socket" server client run? file: organize all concern about server and client think to keep alive
    - "HTTP" request? response? file: working for

parser:
    read config file check if is ok and populate struct
config:
    error check? initialize?
server:
    initialize all about server :
        create socket
        bind socket
        listen on the socket
        accept connection
        send and receive data? maybe is HTTP block
        disconnect?
client:
    initialize all about client :
        create socket
        connect to the server
        send and receive data
        disconnect??
rest_API:
        - https://www.codeproject.com/Articles/1192934/RESTful-API-Designing-Guidelines-The-Best-Practices
        - https://medium.com/@ivan.mejia/modern-c-micro-serivce-rest-api-part-ii-7be067440ca8
request: see webserver_flowchart
        - https://freedium.cfd/https://medium.com/from-the-scratch/http-server-what-do-you-need-to-know-to-build-a-simple-http-server-from-scratch-d1ef8945e4fa

response:

mainly request response key:
    - https://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Request_fields

main status code:
    - `100 Continue`: The server has received the request headers, and the client should proceed to send the request body.
    - `101 Switching Protocols`: The requester has asked the server to switch protocols.
    - `200 OK`: The request was successful.
    - `201 Created`: The request was successful, and a resource was created as a result.
    - `204 No Content`: The server successfully processed the request and is not returning any content.
    - `301 Moved Permanently`: The URL of the requested resource has been changed permanently.
    - `302 Found`: The URL of the requested resource has been changed temporarily.
    - `304 Not Modified`: The resource has not been modified since the version specified by the request headers.
    - `400 Bad Request`: The server could not understand the request due to invalid syntax.
    - `401 Unauthorized`: The request requires user authentication.
    - `403 Forbidden`: The server understood the request, but it refuses to authorize it.
    - `404 Not Found`: The server can't find the requested resource.
    - `405 Method Not Allowed`: The method specified in the request is not allowed for the resource identified by the request URI.
    - `413 Request Entity Too Large`: The request is larger than the server is willing or able to process.
    - `500 Internal Server Error`: An unexpected condition was encountered and no more specific message is suitable.
    - `501 Not Implemented`: The server either does not recognize the request method, or it lacks the ability to fulfill the request.
    - `503 Service Unavailable`: The server is currently unable to handle the request due to a temporary overloading or maintenance of the server.
    - `504 Gateway Timeout`: The server, while acting as a gateway or proxy, did not receive a timely response from the upstream server it accessed in attempting to complete the request.
    - `505 HTTP Version Not Supported`: The server does not support the HTTP protocol version used in the request.

    These status codes are part of the HTTP/1.1 standard. For a more detailed explanation, you can refer to the [HTTP/1.1 Status Code Definitions](https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).

// old code
// bool Webserver::_handleConnection(epoll_event &event) {
//     Client& client= *reinterpret_cast<Client*>(event.data.ptr);
//     // Client * client = static_cast<Client *>(event.data.ptr);
//
//     client.initRequest();
//     client.initResponse();
//     // std::cout<<BLUE<<"handling connection"<<std::endl;
//     // std::cout<<"epollfd: "<<this->_epollFd<<std::endl;
//     // std::cout<<"client socket fd: "<<client._clientSock->getFdSock()<<std::endl;
//     // std::cout<<"client socket service: "<<ntohs(client._clientSock->getService().sin_port)<<std::endl;
//     // std::cout<<"client socket service: "<<inet_ntoa(client._clientSock->getService().sin_addr)<<std::endl;
//     // std::cout<<"client socket size: "<<*client._clientSock->getSockSize()<<std::endl;
//     // std::cout << "Service sin family: " << client._clientSock->getService().sin_family<<RESET_COLOR<< std::endl;
//
//     if(client._request->time_start() == 0)
//             client._request->set_time_start(std::time(NULL));
//     std::time_t currentTime = std::time(NULL);
//     double elapsedTime = std::difftime(currentTime, client._request->time_start());
//     //TODO remember to free request
//     client._request->receiveData(&client);
//
//     std::cout<<MAGENTA<<"handling connection"<<RESET_COLOR<<std::endl;
//     std::cout<<MAGENTA<<"body size :"<<client.request()->body_size()<<RESET_COLOR<<std::endl;
//     std::cout<<MAGENTA<<"header size :"<<client.request()->header_size()<<RESET_COLOR<<std::endl;
//     std::cout<<MAGENTA<<"time start :"<<client.request()->time_start()<<RESET_COLOR<<std::endl;
//     std::cout<<MAGENTA<<"error :"<<client.request()->error()<<RESET_COLOR<<std::endl;
//     // std::cout<<MAGENTA<<"cgi :"<<client.request()->cgi()<<RESET_COLOR<<std::endl;
//     std::cout<<MAGENTA<<"ended :"<<client.request()->ended()<<RESET_COLOR<<std::endl;
//     std::cout<<MAGENTA<<"method :"<<client.request()->method()<<RESET_COLOR<<std::endl;
//     // std::cout<<MAGENTA<<std::endl<<"http message :"<<std::endl<<client.request()->http_message()<<RESET_COLOR<<std::endl<<std::endl;
//     // std::cout<<MAGENTA<<"request headers :"<<client.request()->request_headers()["Host"]<<RESET_COLOR<<std::endl;
//     // std::cout<<MAGENTA<<"request headers :"<<client.request()->request_headers()["User-Agent"]<<RESET_COLOR<<std::endl;
//
//     std::cout<<GREEN<<"request received  method: "<<client._request->method()<<RESET_COLOR<<std::endl;
//     std::cout<<GREEN<<"request received  ended: "<<client._request->ended()<<RESET_COLOR<<std::endl;
//     //understand how to initialize request and what is necessary to read from fd and work on response
//
//     /*
//      * TODO working progress understandig if this workflow is good
//      *    <Request request(currentTime,elapsedTime);
//      *    request.receiveData();
//      *    request.parseRequest();
//      */
//
//     if (elapsedTime>=15)
//     {
//         std::cout<<RED<<"Connection timeout"<<RESET_COLOR<<std::endl;
//         this->_closeConnection(&client);
//         return false;
//     }
//     else if(client._request->ended())
//     {
//         std::cout<<GREEN<<"Request ended"<<RESET_COLOR<<std::endl;
//         //TODO body? send response
//         //pathtofile probably come from client headher or location i've to understand
//         // std::string pathtofile="";
//         // client.initResponse();
//         client.response()->setResponseForMethod(&client);
//         // client._response.sendData(client,readFromFile(pathtofile));
//         if(client.response()->complete()) {
//             this->_closeConnection(&client);
//             return true;
//         }
//     }
//     else if (client._request->cgi())
//     {
//         // client.request()
//         // client.response()
//         //TODO handle cgi
//     }
//     else if (client.request()->error())
//     {
//
//         std::cout<<RED<<"Error in request"<<RESET_COLOR<<std::endl;
//         std::cout<<RED<<"true= "<<true<<"false = "<<false<<RESET_COLOR<<std::endl;
//         this->_closeConnection(&client);
//         return true;
//     }
//     else if (client.response()->error())
//     {
//
//         std::cout<<RED<<"Error in response"<<RESET_COLOR<<std::endl;
//         this->_closeConnection(&client);
//         return false;
//     }
//     return false;
// }


Process 20886 stopped
* thread #1, name = 'webserver', stop reason = signal SIGABRT
    frame #0: 0x00007ffff7aa8e44 libc.so.6`___lldb_unnamed_symbol3665 + 276
libc.so.6`___lldb_unnamed_symbol3665:
->  0x7ffff7aa8e44 <+276>: movl   %eax, %ebx
    0x7ffff7aa8e46 <+278>: negl   %ebx
    0x7ffff7aa8e48 <+280>: cmpl   $0xfffff000, %eax         ; imm = 0xFFFFF000
    0x7ffff7aa8e4d <+285>: movl   $0x0, %eax
(lldb) up
frame #1: 0x00007ffff7a50a30 libc.so.6`raise + 32
libc.so.6`raise:
->  0x7ffff7a50a30 <+32>: testl  %eax, %eax
    0x7ffff7a50a32 <+34>: jne    0x7ffff7a50a40            ; <+48>
    0x7ffff7a50a34 <+36>: movq   -0x8(%rbp), %rbx
    0x7ffff7a50a38 <+40>: leave
(lldb)
frame #2: 0x00007ffff7a384c3 libc.so.6`abort + 223
libc.so.6`abort:
->  0x7ffff7a384c3 <+223>: movq   %fs:0x10, %r12
    0x7ffff7a384cc <+232>: cmpq   %r12, 0x1bf685(%rip)
    0x7ffff7a384d3 <+239>: je     0x7ffff7a384f5            ; <+273>
    0x7ffff7a384d5 <+241>: xorl   %eax, %eax
(lldb)
frame #3: 0x00007ffff7c97b0c libstdc++.so.6`__gnu_cxx::__verbose_terminate_handler() (.cold) at vterminate.cc:95:10
(lldb)
frame #4: 0x00007ffff7cadf1a libstdc++.so.6`__cxxabiv1::__terminate(void (*)()) at eh_terminate.cc:48:15
(lldb)
frame #5: 0x00007ffff7c9750a libstdc++.so.6`std::terminate() at eh_terminate.cc:58:27
(lldb)
frame #6: 0x00007ffff7cae1d6 libstdc++.so.6`__cxxabiv1::__cxa_throw(obj=0x00005555555973c0, tinfo=0x00007ffff7e75dc0, dest=(libstdc++.so.6`std::out_of_range::~out_of_range() at stdexcept.cc:65:3)) at eh_throw.cc:98:18
(lldb)
frame #7: 0x00007ffff7c9b403 libstdc++.so.6`std::__throw_out_of_range_fmt(__fmt="basic_string::at: __n (which is %zu) >= this->size() (which is %zu)") at functexcept.cc:101:27
(lldb)
frame #8: 0x00007ffff7d61e07 libstdc++.so.6`std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char>>::at(this=<unavailable>, __n=<unavailable>) at basic_string.h:1312:28
(lldb)
frame #9: 0x000055555556a845 webserver`Response::getMethod(this=0x00007fffffffb210, client=0x0000555555596bd0) at Response.cpp:63:32
   60  		memset(response, 0, responseSize);
   61  		for(size_t i=0; i < client->header_size();i++)
   62  		{
-> 63  			response[i]= this->_header.at(i);
   64  		}
   65  		for(size_t i=0; i < this->header_size();i++)
   66  		{